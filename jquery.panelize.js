// Generated by CoffeeScript 1.6.2
if (typeof Object.create !== 'function') {
  Object.create = function(obj) {
    var F;

    F = function() {};
    F.prototype = obj;
    return new F();
  };
}

(function($, window, document, undefined_) {
  var Panelize;

  Panelize = {
    init: function(elements, options) {
      var count, lastPosition, self;

      self = this;
      self.options = $.extend({}, $.fn.panelize.options, options);
      self.outerContainer = elements;
      self.panels = elements.children();
      if (self.options.containerSelector !== null) {
        self.innerContainers = elements.find(self.options.containerSelector);
      } else {
        self.innerContainers = self.panels.children();
        self.options.containerSelector = self.innerContainers.first().prop('tagName');
      }
      count = self.options.startZ;
      self.panels.each(function() {
        $(this).css('z-index', count);
        count -= self.options.zStep;
      });
      self.resize();
      self.panels.css({
        'padding-bottom': $(window).height(),
        'position': 'fixed',
        'left': 0,
        'top': 0
      }).addClass('static');
      self.panels.first().css('position', 'relative').removeClass('static').addClass('scroll');
      self.panels.last().css('padding-bottom', 0);
      lastPosition = 0;
      $(window).on('scroll', function() {
        var $element, position;

        position = $(this).scrollTop();
        if (position > lastPosition) {
          $element = $('.scroll').last().find('.container');
          if (($element.offset().top + $element.outerHeight()) <= position) {
            $('.scroll').last().css('padding-bottom', 0);
            $('.static').first().addClass('scroll').removeClass('static').css('position', 'relative');
          }
        } else {
          $element = $('.scroll').last().find('.container');
          if ($element.offset().top > position) {
            if ($('.scroll').length > 1) {
              $('.scroll').last().addClass('static').removeClass('scroll');
              $('.scroll').last().css('padding-bottom', $(window).height());
              $('.static').first().css('position', 'fixed');
            }
          }
        }
        lastPosition = position;
      });
      return self.outerContainer;
    },
    slide: function(id) {
      var curPos, dest, self, time;

      self = this;
      curPos = $(window).scrollTop();
      dest = self.locations[id];
      time = (Math.abs(curPos - dest) / self.options.speed) * 1000;
      $('html,body').animate({
        scrollTop: dest
      }, time);
      return self.outerContainer;
    },
    resize: function() {
      var self;

      self = this;
      self.setHeights();
      setTimeout((function() {
        return self.setOffsets();
      }), 300);
      return self.outerContainer;
    },
    setHeights: function() {
      var self;

      self = this;
      self.innerContainers.css('min-height', $(window).height());
      self.outerContainer.css('min-height', self.getOuterHeight());
      return self.outerContainer;
    },
    setOffsets: function() {
      var self, startingPos;

      self = this;
      self.locations = {};
      startingPos = 0;
      self.panels.each(function() {
        var height;

        height = $(this).find(self.options.containerSelector).outerHeight();
        startingPos += height;
        self.locations['#' + $(this).attr('id')] = startingPos - height;
      });
      return self.outerContainer;
    },
    getOuterHeight: function() {
      var height, self;

      self = this;
      height = 0;
      self.innerContainers.each(function() {
        height += $(this).outerHeight();
      });
      return height;
    }
  };
  $.fn.panelize = function() {
    if ($.fn.panelize.instance == null) {
      $.fn.panelize.instance = Object.create(Panelize);
    }
    if (typeof arguments[0] === 'object' || arguments[0] === void 0) {
      return $.fn.panelize.instance.init(this, arguments[0]);
    } else if (arguments[0] === 'resize') {
      return $.fn.panelize.instance.resize();
    } else if (arguments[0] === 'slide' && (arguments[1] != null)) {
      return $.fn.panelize.instance.slide(arguments[1]);
    } else {
      return $.error('Method ' + method + ' does not exists on jQuery.panelize');
    }
  };
  return $.fn.panelize.options = {
    containerSelector: null,
    speed: 1000,
    startZ: 1000,
    zStep: 50
  };
})(jQuery, window, document);
